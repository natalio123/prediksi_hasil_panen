# -*- coding: utf-8 -*-
"""Tugas Predictive Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j5XtGl6hQmLjpXu8oZl3JgmH3gYXwoN2

## Proyek Machine Learning Prediksi Hasil Panen - Natalio Michael Tumuahi

Import Library
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import OneHotEncoder
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
# %matplotlib inline

"""Data Loading

"""

url = 'https://raw.githubusercontent.com/natalio123/prediksi_hasil_panen/master/dataset/crop_yield.csv'
df = pd.read_csv(url)
df

"""### Explanatory Data Analysis"""

# Deskripsi variabel
df.info()

df.describe(include='all')

# cek nilai missing value
missing_percent = df.isnull().mean() * 100
missing_percent

# cek duplicate
duplikat = df.duplicated().sum()
duplikat

# Cek outliers
sns.boxplot(x=df['Crop'])

sns.boxplot(x= df['Days_to_Harvest'])

sns.boxplot(x=df['Fertilizer_Used'])

sns.boxplot(x=df['Soil_Type'])

sns.boxplot(x=df['Irrigation_Used'])

sns.boxplot(x=df['Rainfall_mm'])

sns.boxplot(x=df['Region'])

sns.boxplot(x=df['Temperature_Celsius'])

sns.boxplot(x=df['Weather_Condition'])

sns.boxplot(x=df['Yield_tons_per_hectare'])

df_numeric = df['Yield_tons_per_hectare']
Q1 = df_numeric.quantile(0.25)
Q3 = df_numeric.quantile(0.75)
IQR = Q3 - Q1
df = df[~((df_numeric < (Q1 - 1.5 * IQR)) | (df_numeric > (Q3 + 1.5 * IQR)))]

# cek ukuran dataset
df.shape

# Univariate EDA
numerical_features = ['Days_to_Harvest', 'Rainfall_mm', 'Temperature_Celsius', 'Yield_tons_per_hectare']
categorical_features = ['Crop', 'Irrigation_Used', 'Soil_Type','Fertilizer_Used', 'Weather_Condition', 'Region']

feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Fitur Irrigation Used
feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Fitur Soil_Type
feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Fertilizer_Used
feature = categorical_features[3]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Weather_Condition
feature = categorical_features[4]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Fitur Region
feature = categorical_features[5]
count = df[feature].value_counts()
percent = 100 * df[feature].value_counts(normalize=True)
df_baru = pd.DataFrame({'Jumlah sampel': count, 'persentase': percent.round(1)})
print(df_baru)
count.plot(kind='bar', title=feature);

# Numerical features
df.hist(bins=50, figsize=(20,15))
plt.show()

# Multivariate EDA
cat_features = df.select_dtypes(include=['object', 'bool']).columns.to_list()

for col in cat_features:
  sns.catplot(x=col, y='Yield_tons_per_hectare', kind='bar', dodge=False, data=df, aspect=2, height=3, palette='Set3')
  plt.title(f'Rata-rata hasil panen berdasarkan {col}', y=1.05, size=15)

# Numerical Features
# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind='kde')

plt.figure(figsize=(10,8))
correlation_matrix = df[numerical_features].corr().round(2)
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5,)
plt.title('Correlation Matrix untuk Fitur Numerik ', size=20)

"""## Data Preparation"""

# Encoding Fitur Kategori
df = pd.concat([df, pd.get_dummies(df['Crop'], prefix='Crop')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Region'], prefix='Region')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Soil_Type'], prefix='Soil_Type')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Fertilizer_Used'], prefix='Fertilizer_Used')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Irrigation_Used'], prefix='Irrigation_Used')], axis=1)
df = pd.concat([df, pd.get_dummies(df['Weather_Condition'], prefix='Weather_Condition')], axis=1)
df.drop(['Crop', 'Region', 'Soil_Type', 'Fertilizer_Used', 'Irrigation_Used', 'Weather_Condition'], axis=1, inplace=True)
df.head()

# Train-Test-Split
X = df.drop(['Yield_tons_per_hectare'], axis=1)
y= df['Yield_tons_per_hectare']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Mengecek jumlah sampel pada masing-masing bagian
print(f'Jumlah sampel X_train: {X_train.shape[0]}, Jumlah sampel y_train: {y_train.shape[0]}')
print(f'Jumlah sampel X_test: {X_test.shape[0]}, Jumlah sampel y_test: {y_test.shape[0]}')

# Standarisasi
numerical_features = ['Rainfall_mm', 'Temperature_Celsius', 'Days_to_Harvest']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train[numerical_features])
X_train[numerical_features].head()

X_train[numerical_features].describe().round(4)

"""Model Development"""

models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns = ['Random Forest', 'Linear Regression'])

"""Random Forest"""

RF = RandomForestRegressor(n_estimators = 50, max_depth = 14, random_state = 123, n_jobs = -1)
RF.fit(X_train, y_train)

models.loc['train_mse','Random Forest'] = mean_squared_error(y_pred = RF.predict(X_train), y_true=y_train)

"""Linear Regression"""

LN = LinearRegression()
LN.fit(X_train, y_train)

models.loc['train_mse', 'Linear Regression'] = mean_squared_error(y_pred = LN.predict(X_train), y_true = y_train )

"""## Evaluation Model

"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['RF', 'LN'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'RF': RF, 'LN' : LN}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
  mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))
  mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))

# Panggil mse
mse

"""Dapat dilihat dari test mse terlihat bahwa RF sedikit lebih akurat di training data"""

# Uji
prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true': y_test[:1]}
for name, model in model_dict.items():
  pred_dict['prediksi_'+name] = model.predict(prediksi).round(4)

pd.DataFrame(pred_dict)

"""Kesimpulannya


*   Random Forest sedikit lebih unggul prediksi akurasi
*  Tidak ada overfitting signifikan, kedua model generalisasi cukup baik

*   Model bisa digunakan untuk membantu estimasi hasil panen dari data cuaca, mendukung perencanaan pertanian yang lebih efisien.



"""